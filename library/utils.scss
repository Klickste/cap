////
/// @group utils
/// @author cgoern
////

// ==========================================================================
// Modules
// ==========================================================================

@use 'sass:math';
@use 'sass:list';
@use './config';

// ==========================================================================
// Functions
// ==========================================================================

/// Calculates the trim offset for a font size.
///
/// @since 1.0.0
///
/// @param {number} $fontSize - The font size.
/// @param {number} $lineHeight - The line height.
/// @param {number} $upm - Units Per eM of the typeface.
/// @param {number} $capHeight - Cap height ot the typeface.
@function calcTrimOffset($fontSize, $lineHeight, $upm, $capHeight) {
  $boxHeight: if(
    config.$roundEven,
    2 * math.round(math.div(((math.div($capHeight, $upm)) * $fontSize), 2)),
    math.round(math.div($capHeight, $upm) * $fontSize)
  );

  @return math.div(($lineHeight - $boxHeight), 2);
}

/// Calculates an exponential ratio.
///
/// Inspired by the "Dynamic Metrics" section of the Inter typeface family website.
/// https://rsms.me/inter/dynmetrics
///
/// @since 1.0.0
///
/// @param {number} $size - The size.
/// @param {number} $a
/// @param {number} $b
/// @param {number} $c
@function calcRatio($size, $a, $b, $c) {
  $d: math.div($size, 1px);

  @return ($a + ($b * math.pow(math.$e, $c * $d)));
}

/// Calculates the letter spacing for a font size.
///
/// @since 1.0.0
///
/// @param {number} $fontSize - The font size.
/// @param {number} $spacing - Ratio modifier for the calculation.
@function calcLetterSpacing($fontSize, $spacing) {
  $ratio: calcRatio($fontSize, -0.0223, 0.185, -0.1745 + math.div($spacing, 100));

  @return math.div(math.round($ratio * 1000), 1000) * 1em;
}

/// Calculates the line height for a font size.
///
/// @since 1.0.0
///
/// @param {number} $fontSize - The font size.
@function calcLineHeight($fontSize) {
  $ratio: calcRatio($fontSize, 1.2, 1.8, -0.12);

  @if config.$roundEven {
    @return math.round(math.div($fontSize * $ratio, 2)) * 2;
  } @else {
    @return math.round($fontSize * $ratio);
  }
}

/// Calculates a modular font size.
///
/// @since 1.0.0
///
/// @param {number} $base - Base font size for the scale calculation.
/// @param {number} $factor - Factor for the modular scale calculation.
/// @param {number} $scale - The modular scale index.
@function calcFontSize($base, $factor, $scale) {
  @return math.round($base * math.pow($factor, $scale));
}

/// Reverses the order of items in a list.
///
/// @since 4.0.0
///
/// @param {list} $list - The list.
@function reverseList($list) {
  $reversed: ();

  @for $index from list.length($list) * -1 through -1 {
    $reversed: list.append($reversed, list.nth($list, math.abs($index)));
  }

  @return $reversed;
}

// ==========================================================================
// Mixins
// ==========================================================================

/// Reduces the height of a selector by the value of the assigned trim offset.
///
/// @since 2.0.0
///
/// @param {string} $name - The name of the selector which should be trimmed.
@mixin trim($name) {
  padding-bottom: 1px;
  padding-top: 1px;

  &::before,
  &::after {
    content: '';
    display: block;
    height: 0;
  }

  &::before {
    margin-top: calc((var(--cap-#{$name}-trimOffset) + 1px) * -1);
  }

  &::after {
    margin-bottom: calc((var(--cap-#{$name}-trimOffset) + 1px) * -1);
  }
}
