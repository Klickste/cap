////
/// @group scale
/// @author cgoern
////

// ==========================================================================
// Modules
// ==========================================================================

@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';
@use './library/utils';

// ==========================================================================
// Variables
// ==========================================================================

/// Base font size for the scale calculation.
///
/// @since 2.1.0
///
/// @type number
$base: 15px !default;

/// Number of upscales which should be calculated.
///
/// @since 2.1.0
///
/// @type number
$ups: 6 !default;

/// Number of downscales which should be calculated.
///
/// @since 2.1.0
///
/// @type number
$downs: 6 !default;

/// Factor for the modular scale calculation.
///
/// @since 2.1.0
///
/// @type number
$factor: 1.2 !default;

/// Ratio modifier for the letter spacing calculation.
///
/// @since 2.1.0
///
/// @type number
$spacing: 0 !default;

/// UPM (Units Per eM) and cap height values of the used typeface.
///
/// @since 2.1.0
///
/// @type null | list | map
$metrics: null !default;

/// Up- and downscale custom property names.
///
/// @since 2.0.0
///
/// @type list
$levels: (
  '-8': '7xs',
  '-7': '6xs',
  '-6': '5xs',
  '-5': '4xs',
  '-4': '3xs',
  '-3': '2xs',
  '-2': 'xs',
  '-1': 'sm',
  '0': 'md',
  '+1': 'lg',
  '+2': 'xl',
  '+3': '2xl',
  '+4': '3xl',
  '+5': '4xl',
  '+6': '5xl',
  '+7': '6xl',
  '+8': '7xl',
);

/// Name values of the levels.
///
/// @since 4.0.0
///
/// @type list
$levelNames: map.values($levels);

/// Index of the base level.
///
/// @since 4.0.0
///
/// @type number
$levelStart: list.index($levelNames, 'md');

/// Line height modifiers.
///
/// @since 3.3.4
///
/// @type map
$leadings: (
  'tight': -4px,
  'narrow': -2px,
  'compact': 0px,
  'loose': 2px,
  'open': 4px,
);

// ==========================================================================
// Mixins
// ==========================================================================

/// Declares a set of custom properties for up- and downscales.
///
/// @since 2.0.0
///
/// @param {number} $base - Base font size for the scale calculation.
/// @param {number} $ups - Number of upscales which should be calculated.
/// @param {number} $downs - Number of downscales which should be calculated.
/// @param {number} $factor - Factor for the modular scale calculation.
/// @param {number} $spacing - Ratio for the letter spacing calculation.
/// @param {null | list | map} $metrics - UPM and cap height values of the used typeface.
@mixin props(
  $base: $base,
  $ups: $ups,
  $downs: $downs,
  $factor: $factor,
  $spacing: $spacing,
  $metrics: $metrics
) {
  @for $level from ($downs * -1) through $ups {
    $name: list.nth($levelNames, $levelStart + $level);
    $fontSize: utils.calcFontSize($base, $factor, $level);
    $lineHeight: utils.calcLineHeight($fontSize);

    //
    // Declare fontSize and lineHeight.
    // --------------------------------------------------------------------------
    --cap-fontSize-#{$name}: #{$fontSize};
    --cap-lineHeight-#{$name}: #{$lineHeight};

    //
    // Declare letterSpacing for a single style.
    // --------------------------------------------------------------------------
    @if meta.type-of($spacing) == 'number' {
      --cap-letterSpacing-#{$name}: #{utils.calcLetterSpacing($fontSize, $spacing)};
    }

    //
    // Declare letterSpacing for multiple styles.
    // --------------------------------------------------------------------------
    @else if meta.type-of($spacing) == 'map' {
      @each $style, $value in $spacing {
        @if $value {
          --cap-letterSpacing-#{$name}-#{$style}: #{utils.calcLetterSpacing($fontSize, $value)};
        }
      }
    }

    //
    // Declare trimOffset for a single style.
    // --------------------------------------------------------------------------
    @if meta.type-of($metrics) == 'list' {
      $upm: list.nth($metrics, 1);
      $capHeight: list.nth($metrics, 2);

      --cap-trimOffset-#{$name}: #{utils.calcTrimOffset($fontSize, $lineHeight, $upm, $capHeight)};
    }

    //
    // Declare trimOffset for multiple styles.
    // --------------------------------------------------------------------------
    @else if meta.type-of($metrics) == 'map' {
      @each $style, $metric in $metrics {
        $upm: list.nth($metric, 1);
        $capHeight: list.nth($metric, 2);

        --cap-trimOffset-#{$name}-#{$style}: #{utils.calcTrimOffset(
            $fontSize,
            $lineHeight,
            $upm,
            $capHeight
          )};
      }
    }
  }

  @each $name, $value in $leadings {
    --cap-lineHeightModifier-#{$name}: #{$value};
  }
}
