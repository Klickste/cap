/*===============================
=            Modules            =
===============================*/

@use 'sass:map';
@use 'sass:list';
@use './../library/config';
@use './../library/utils';
@use './../library/setup';

/*=================================
=            Variables            =
=================================*/

/**
 *
 * Description...
 *
 */

$_sizes: ();
$_sizes: list.append($_sizes, list.nth(config.$sizeKeys, config.$baseSizeIndex));
$_sizes: list.append($_sizes, list.nth(config.$sizeKeys, config.$baseSizeIndex - 1));
$_sizes: list.append($_sizes, list.nth(config.$sizeKeys, config.$baseSizeIndex + 1));

/**
 *
 * Description...
 *
 */

$_weightNames: utils.getWeightNames(config.$fonts);

/*=============================
=            Rules            =
=============================*/

cap-rich-text {
  --cap-richText-lineHeightModifier: 0px;

  font-family: var(--cap-richText-fontFamily, var(--cap-fontFamily-#{config.$defaultFont}));
  font-feature-settings: var(
    --cap-richText-fontFeatureSettings,
    var(--cap-fontFeatureSettings-#{config.$defaultFont})
  );
  font-kerning: normal;
  font-weight: var(--cap-richText-fontWeight);
  -webkit-font-smoothing: antialiased;
  letter-spacing: var(--cap-richText-letterSpacing);
  -moz-osx-font-smoothing: grayscale;
  text-rendering: optimizeLegibility;
  -webkit-text-size-adjust: none;
  display: grid;
  gap: var(--cap-richText-gap, 32px);

  > h1,
  > h2,
  > h3,
  > h4,
  > h5,
  > h6,
  > p,
  > ul,
  > ol {
    font-size: var(--cap-richText-fontSize);
    line-height: calc(var(--cap-richText-lineHeight) + var(--cap-richText-lineHeightModifier));
    letter-spacing: var(--cap-richText-letterSpacing);
    margin: 0;

    @if config.$trim {
      padding-bottom: 1px;
      padding-top: 1px;

      &::before,
      &::after {
        content: '';
        display: block;
        height: 0;
      }

      &::before {
        margin-top: calc(
          (var(--cap-richText-offset) + (var(--cap-richText-lineHeightModifier) / 2) + 1px) * -1
        );
      }

      &::after {
        margin-bottom: calc(
          (var(--cap-richText-offset) + (var(--cap-richText-lineHeightModifier) / 2) + 1px) * -1
        );
      }
    }
  }

  /**
   *
   * Description...
   *
   */

  @each $fontName, $fontProps in config.$fonts {
    &[family='#{$fontName}'] {
      --cap-richText-fontFamily: var(--cap-fontFamily-#{$fontName});
      --cap-richText-fontFeatureSettings: var(--cap-fontFeatureSettings-#{$fontName});

      @each $sizeKey, $sizeName in $_sizes {
        $sizeIndex: list.index(map.keys(config.$sizeKeys), $sizeKey);

        --cap-richText-paragraph-letterSpacing-#{$sizeName}: var(
          --cap-letterSpacing-#{$sizeName}-#{$fontName}
        );

        @if config.$trim {
          --cap-richText-paragraph-offset-#{$sizeName}: var(--cap-offset-#{$sizeName}-#{$fontName});
        }

        @for $headingLevel from 1 through 6 {
          $sizeUpIndex: ($sizeIndex) + (6 - $headingLevel);
          $sizeUpName: list.nth(list.nth(config.$sizeKeys, $sizeUpIndex), 2);

          --cap-richText-heading-#{$headingLevel}-letterSpacing-#{$sizeUpName}: var(
            --cap-letterSpacing-#{$sizeUpName}-#{$fontName}
          );

          @if config.$trim {
            --cap-richText-heading-#{$headingLevel}-offset-#{$sizeUpName}: var(
              --cap-offset-#{$sizeUpName}-#{$fontName}
            );
          }
        }
      }
    }
  }

  /**
   *
   * Description...
   *
   */

  @each $sizeKey, $sizeName in $_sizes {
    &[size='#{$sizeKey}'] {
      $sizeIndex: list.index(map.keys(config.$sizeKeys), $sizeKey);

      --cap-richText-paragraph-fontSize: var(--cap-fontSize-#{$sizeName});
      --cap-richText-paragraph-lineHeight: var(--cap-lineHeight-#{$sizeName});
      --cap-richText-paragraph-letterSpacing: var(
        --cap-richText-paragraph-letterSpacing-#{$sizeName},
        var(--cap-letterSpacing-#{$sizeName}-#{config.$defaultFont})
      );

      @if config.$trim {
        --cap-richText-paragraph-offset: var(
          --cap-richText-paragraph-offset-#{$sizeName},
          var(--cap-offset-#{$sizeName}-#{config.$defaultFont})
        );
      }

      @for $headingLevel from 1 through 6 {
        $sizeUpIndex: ($sizeIndex) + (6 - $headingLevel);
        $sizeUpName: list.nth(list.nth(config.$sizeKeys, $sizeUpIndex), 2);

        --cap-richText-heading-#{$headingLevel}-fontSize: var(--cap-fontSize-#{$sizeUpName});
        --cap-richText-heading-#{$headingLevel}-lineHeight: var(--cap-lineHeight-#{$sizeUpName});
        --cap-richText-heading-#{$headingLevel}-letterSpacing: var(
          --cap-richText-heading-#{$headingLevel}-letterSpacing-#{$sizeUpName},
          var(--cap-letterSpacing-#{$sizeUpName}-#{config.$defaultFont})
        );

        @if config.$trim {
          --cap-richText-heading-#{$headingLevel}-offset: var(
            --cap-richText-heading-#{$headingLevel}-offset-#{$sizeUpName},
            var(--cap-offset-#{$sizeUpName}-#{config.$defaultFont})
          );
        }
      }
    }
  }

  /**
   *
   * Description...
   *
   */

  @each $lineHeightModifierName, $lineHeightModifier in config.$lineModifiers {
    &[line='#{$lineHeightModifierName}'] {
      --cap-richText-lineHeightModifier: #{$lineHeightModifier};
    }
  }

  /**
   *
   * Description...
   *
   */

  p,
  ul,
  ol {
    --cap-richText-fontSize: var(--cap-richText-paragraph-fontSize);
    --cap-richText-lineHeight: var(--cap-richText-paragraph-lineHeight);
    --cap-richText-letterSpacing: var(--cap-richText-paragraph-letterSpacing);

    @if config.$trim {
      --cap-richText-offset: var(--cap-richText-paragraph-offset);
    }
  }

  @for $headingLevel from 1 through 6 {
    h#{$headingLevel} {
      --cap-richText-fontSize: var(--cap-richText-heading-#{$headingLevel}-fontSize);
      --cap-richText-lineHeight: var(--cap-richText-heading-#{$headingLevel}-lineHeight);
      --cap-richText-letterSpacing: var(--cap-richText-heading-#{$headingLevel}-letterSpacing);

      @if config.$trim {
        --cap-richText-offset: var(--cap-richText-heading-#{$headingLevel}-offset);
      }
    }
  }

  a {
    color: var(--cap-richText-anchor-color, blue);
  }
}
