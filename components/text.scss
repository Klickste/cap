/*===============================
=            Modules            =
===============================*/

@use 'sass:map';
@use 'sass:list';
@use 'sass:string';
@use './../library/config';
@use './../library/utils';
@use './../library/setup';

/*=================================
=            Variables            =
=================================*/

/**
 *
 * Description...
 *
 */

$shadow: false !default;

/**
 *
 * Description...
 *
 */

$_selector: if($shadow, '::part(cap-text)', 'cap-text');

/**
 *
 * Description...
 *
 */

$_sizeKeys: map.keys(list.nth(setup.$scales, 1));

/**
 *
 * Description...
 *
 */

$_sizeNames: utils.getSizeNames(setup.$scales);

/**
 *
 * Description...
 *
 */

$_weightNames: utils.getWeightNames(config.$fonts);

/*==============================
=            Mixins            =
==============================*/

/**
 *
 * Description...
 *
 */

@mixin declareFont($fontName) {
  --cap-text-fontFamily: var(--cap-fontFamily-#{$fontName});
  --cap-text-fontFeatureSettings: var(--cap-fontFeatureSettings-#{$fontName});

  @each $sizeName in $_sizeNames {
    --cap-text-offset-#{$sizeName}: var(--cap-offset-#{$sizeName}-#{$fontName});
    --cap-text-letterSpacing-#{$sizeName}: var(--cap-letterSpacing-#{$sizeName}-#{$fontName});
  }
}

/**
 *
 * Description...
 *
 */

@mixin declareSize($sizeName) {
  --cap-text-fontSize: var(--cap-fontSize-#{$sizeName});
  --cap-text-lineHeight: var(--cap-lineHeight-#{$sizeName});
  --cap-text-offset: var(
    --cap-text-offset-#{$sizeName},
    var(--cap-offset-#{$sizeName}-#{config.$defaultFont})
  );
  --cap-text-letterSpacing: var(
    --cap-text-letterSpacing-#{$sizeName},
    var(--cap-letterSpacing-#{$sizeName}-#{config.$defaultFont})
  );
}

/**
 *
 * Description...
 *
 */

@mixin declareWeight($weightName) {
  --cap-text-fontWeight: var(
    --cap-text-fontWeight-#{$weightName},
    var(--cap-fontWeight-#{config.$defaultWeight}-#{config.$defaultFont})
  );

  @each $fontName, $fontProps in config.$fonts {
    --cap-text-fontWeight-#{$weightName}: var(--cap-fontWeight-#{$weightName}-#{$fontName});
  }
}

/**
 *
 * Description...
 *
 */

@mixin declareLineHeightModifier($lineHeightModifier) {
  --cap-text-lineHeightModifier: #{$lineHeightModifier};
}

/*=============================
=            Rules            =
=============================*/

#{$_selector} {
  --cap-text-lineHeightModifier: 0px;

  display: block;
  font-family: var(--cap-text-fontFamily, var(--cap-fontFamily-#{config.$defaultFont}));
  font-feature-settings: var(
    --cap-text-fontFeatureSettings,
    var(--cap-fontFeatureSettings-#{config.$defaultFont})
  );
  font-kerning: normal;
  font-weight: var(--cap-text-fontWeight);
  font-size: var(--cap-text-fontSize);
  line-height: calc(var(--cap-text-lineHeight) + var(--cap-text-lineHeightModifier));
  -webkit-font-smoothing: antialiased;
  letter-spacing: var(--cap-text-letterSpacing);
  -moz-osx-font-smoothing: grayscale;
  text-rendering: optimizeLegibility;
  -webkit-text-size-adjust: none;
  padding-bottom: 1px;
  padding-top: 1px;

  > * {
    margin: 0;
    display: block;
    font-size: inherit;
    font-weight: inherit;
    line-height: inherit;
  }

  /**
   *
   * Description...
   *
   */

  &::before,
  &::after {
    content: '';
    display: block;
    height: 0;
  }

  &::before {
    margin-top: calc(
      (var(--cap-text-offset) + (var(--cap-text-lineHeightModifier) / 2) + 1px) * -1
    );
  }

  &::after {
    margin-bottom: calc(
      (var(--cap-text-offset) + (var(--cap-text-lineHeightModifier) / 2) + 1px) * -1
    );
  }

  /**
   *
   * Description...
   *
   */

  @each $fontName, $fontProps in config.$fonts {
    @if $shadow {
      @at-root {
        ::part(cap-family-#{$fontName}) {
          @include declareFont($fontName);
        }
      }
    } @else {
      &[family='#{$fontName}'] {
        @include declareFont($fontName);
      }
    }
  }

  /**
   *
   * Description...
   *
   */

  @each $sizeKey in $_sizeKeys {
    $sizeName: map.get(config.$sizeKeys, $sizeKey);
    $isPositive: string.index($sizeKey, '+') == 1;

    @if $shadow {
      @at-root {
        ::part(cap-size-#{if($isPositive, '\\#{$sizeKey}', $sizeKey)}) {
          @include declareSize($sizeName);
        }
      }
    } @else {
      &[size='#{$sizeKey}'] {
        @include declareSize($sizeName);
      }
    }
  }

  /**
   *
   * Description...
   *
   */

  @each $weightName in $_weightNames {
    @if $shadow {
      @at-root {
        ::part(cap-weight-#{$weightName}) {
          @include declareWeight($weightName);
        }
      }
    } @else {
      &[weight='#{$weightName}'] {
        @include declareWeight($weightName);
      }
    }
  }

  /**
   *
   * Description...
   *
   */

  @each $lineHeightModifierName, $lineHeightModifier in config.$lineModifiers {
    @if $shadow {
      @at-root {
        ::part(cap-line-height-modifier-#{$lineHeightModifierName}) {
          @include declareLineHeightModifier($lineHeightModifier);
        }
      }
    } @else {
      &[line='#{$lineHeightModifierName}'] {
        @include declareLineHeightModifier($lineHeightModifier);
      }
    }
  }
}
